#!/usr/bin/env python
import sys
import os
import Parser_ed
from pylab import *

__author__ = 'vladimir'

'''
This script is used to plot data that is generated by the exact diagonalization for the heisenberg model
'''

import argparse
parser = argparse.ArgumentParser()

parser.add_argument('-nx', type=int, help="number of sites in x direction")
parser.add_argument('-ny', type=int, help="number of sites in y direction")
parser.add_argument('-dilution', type=float, help="dilution. f = 0 => 2D, f = 1 => PAM")
parser.add_argument('-J', type=float, default = -1, help="coupling strength")
parser.add_argument('-J1', type=float, default = -1, help="coupling in the z direction")
parser.add_argument('-m', type=str, default = "heisenberg", help="name of the model")

# parser.add_argument('-x_variable', type=str, help="""variable along x axis
# T - temperature
# """)

parser.add_argument('-y_variable', type=str, help="""variable along y axis
energy - total energy
C - specific heat
""")
args = parser.parse_args(sys.argv[1:])

execfile('settings.py')

path = os.path.join(folder_with_different_models, args.m)

data_list = (Parser_ed.Parser_ed(data_file=os.path.join(path, item), fName=item) for item in os.listdir(path))

#filter J
# data_list = (item for item in data_list if (item.get_J() == args.J))

#filter nx
data_list = (item for item in data_list if (item.get_nx() == args.nx))

#filter ny
data_list = (item for item in data_list if (item.get_ny() == args.ny))

result = []

for item in data_list:
  if args.y_variable == 'energy':
    x_list = item.get_energy()[0]
    y_list = item.get_energy()[1]
  elif args.y_variable == "C":
    x_list = item.get_specific_heat()[0]
    y_list = item.get_specific_heat()[1]

  print 'x_list = ', x_list
  print 'y_list = ', y_list
  plot(x_list, y_list, label=r'${nx} \times {ny}$'.format(nx=item.get_nx(), ny=item.get_ny()), linewidth=2)

grid(True)
legend()
show()
#
#
# if args.x_variable == "T":
#   xlabel("$T$")
#   if args.y_variable == "energy":
#     ylabel("$energy$")
#     result = [(item.get_T(), item.get_energy()[0], item.get_energy()[1]) for item in data_list]
# result.sort()
#
# x_list = [item[0] for item in result]
# y_list = [item[1] for item in result]
# y_err = [item[2] for item in result]
#
# print x_list
# print y_list
# print y_err
# errorbar(x_list, y_list, yerr=y_err)
# show()
#
#
